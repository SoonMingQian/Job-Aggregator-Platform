version: '3.8'

services:
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/data
    networks:
      - app-network

  kafka:
    image: wurstmeister/kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    volumes:
      - kafka-data:/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CREATE_TOPICS: "analysis:1:1,storage:1:1,skill:1:1"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092"]
      interval: 5s
      timeout: 10s
      retries: 5

  mysql-jobs-storage:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: jobs
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3308:3306"
    volumes:
      - mysql-jobs-storage-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  mysql-user-management:
    image: mysql:latest
    environment:
      MYSQL_DATABASE: users
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3307:3306"
    volumes:
      - mysql-user-management-data:/var/lib/mysql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build: ./user-management-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-user-management:3306/users
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "8081:8081"
    depends_on:
      mysql-user-management:
        condition: service_healthy
    networks:
      - app-network

  jobs-storage-service:
    build: ./jobs-storage/jobs-storage-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-jobs-storage:3306/jobs
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    ports:
      - "8080:8080"
    depends_on:
      kafka:
        condition: service_healthy
      mysql-jobs-storage:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  matching-service:
    build: ./matching-service
    environment:
      SERVER_PORT: 8082
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
    ports:
      - "8082:8082"
    depends_on:
      redis:
        condition: service_started
    networks:
      - app-network

  indeed-scraper:
    build: ./indeed
    ports:
      - "3001:3001"
    depends_on:
      - redis
      - kafka
    networks:
      - app-network

  jobsie-scraper:
    build: ./jobsIE
    ports:
      - "3002:3002"
    depends_on:
      - redis
      - kafka
    networks:
      - app-network

  text-processing:
    build: ./text-processing
    ports:
      - "5000:5000"
    depends_on:
      - kafka
      - redis
    networks:
      - app-network

  ai-skills-extraction:
    build: ./ai-skills-extraction
    depends_on:
      - kafka
      - redis
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  redis-data:
  kafka-data:   
  zookeeper-data:  
  mysql-jobs-storage-data:
  mysql-user-management-data: